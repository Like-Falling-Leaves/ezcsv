{"name":"Ezcsv","tagline":"Convert between CSV and JSON types.  No config.","body":"# ezcsv\r\n\r\nConvert between CSV and JSON types with very simple API.\r\n\r\n[![NPM info](https://nodei.co/npm/ezcsv.png?downloads=true)](https://nodei.co/npm/ezcsv.png?downloads=true)\r\n\r\n[![Travis build status](https://api.travis-ci.org/Like-Falling-Leaves/ezcsv.png?branch=master)](\r\nhttps://travis-ci.org/Like-Falling-Leaves/ezcsv)\r\n\r\n\r\n## Install\r\n\r\n    npm install ezcsv\r\n\r\n\r\n## API\r\n\r\nThis library tries to convert tables stored as CSV or TSV into an array of json objects.  Consider a table of the following format:\r\n\r\nName|Date\r\nYorkan, Yorkie|Sun Aug 31 2014 16:07:57 GMT-0700 (PDT)\r\nYorkie, Yorkan|Sun Aug 31 2014 16:08:23 GMT-0700 (PDT)\r\n\r\nThis module would convert that to the following JSON structure:\r\n\r\n```json\r\n{\r\n  \"header\": [\r\n    \"Name\",\r\n    \"Date\"\r\n  ],\r\n  \"items\": [\r\n    {\r\n      \"Name\": \"Yorkan, Yorkie\",\r\n      \"Date\": \"Sun Aug 31 2014 16:07:57 GMT-0700 (PDT)\"\r\n    },\r\n    {\r\n      \"Name\": \"Yorkie, Yorkan\",\r\n      \"Date\": \"Sun Aug 31 2014 16:08:23 GMT-0700 (PDT)\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n### Read TSV\r\n\r\nIf a file is saved as TSV, the module expects the first line to be the 'header'.  It then creates an object for every subsequent line.\r\n\r\n```javascript\r\n    var ezcsv = require('ezcsv');\r\n    var json = ezcsv.tsv.read('example1.tsv');\r\n    ....\r\n    json.items.forEach(function () { .... })\r\n```\r\n\r\n### Writing TSV as output\r\n\r\nYou can write a set of objects to TSV.  If the header field is omitted, it will calculate the header based on the values of the objects provided (default to empty string for any missing fields).\r\n\r\n```javascript\r\n    var ezcsv = require('ezcsv');\r\n    var json = ezcsv.tsv.write(\r\n      'example1.tsv', \r\n      {\r\n        header: ['Name', 'Date'], // optional, it will auto-calculate\r\n        items: [ .... ]\r\n      }\r\n    );\r\n```\r\n\r\n### CSV Files\r\n\r\nReading and writing CSV files is similar, just use <strong>ezcsv.csv</strong> instead of <strong>ezcsv.tsv</strong>/\r\n\r\n### Empty lines, separators etc.\r\n\r\nBy default, empty lines are skipped both when reading and writing.  Line separator is newline when writing and also carriage-return when reading.  Field seperator is comma or tab as the case may be.  All of these are configurable by using the <strong>get</strong> method with a config (it returns the <strong>read</strong> and <strong>write</strong> methods).  Look at index.js to see how to specify these configuration parameters.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}